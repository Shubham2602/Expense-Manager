{"ast":null,"code":"const _require = require('assert'),\n      assert = _require.strict;\n\nconst _require2 = require('../../help/consts'),\n      KEYLENGTHS = _require2.KEYLENGTHS;\n\nconst _require3 = require('../../jwk/generate'),\n      generateSync = _require3.generateSync;\n\nconst derive = require('./derive');\n\nconst wrapKey = (key, payload, {\n  enc\n}) => {\n  const epk = generateSync(key.kty, key.crv);\n  const derivedKey = derive(enc, KEYLENGTHS[enc], epk, key);\n  return {\n    wrapped: derivedKey,\n    header: {\n      epk: {\n        kty: key.kty,\n        crv: key.crv,\n        x: epk.x,\n        y: epk.y\n      }\n    }\n  };\n};\n\nconst unwrapKey = (key, payload, {\n  apu,\n  apv,\n  epk,\n  enc\n}) => {\n  return derive(enc, KEYLENGTHS[enc], key, epk, {\n    apu,\n    apv\n  });\n};\n\nconst ALG = 'ECDH-ES';\n\nmodule.exports = JWA => {\n  assert(!JWA.keyManagementEncrypt.has(ALG), \"keyManagementEncrypt alg \".concat(ALG, \" already registered\"));\n  assert(!JWA.keyManagementDecrypt.has(ALG), \"keyManagementDecrypt alg \".concat(ALG, \" already registered\"));\n  JWA.keyManagementEncrypt.set(ALG, wrapKey);\n  JWA.keyManagementDecrypt.set(ALG, unwrapKey);\n};","map":null,"metadata":{},"sourceType":"script"}