{"ast":null,"code":"const _require = require('../errors'),\n      JWKKeySupport = _require.JWKKeySupport,\n      JOSENotSupported = _require.JOSENotSupported;\n\nconst _require2 = require('../help/consts'),\n      KEY_MANAGEMENT_ENCRYPT = _require2.KEY_MANAGEMENT_ENCRYPT,\n      KEY_MANAGEMENT_DECRYPT = _require2.KEY_MANAGEMENT_DECRYPT;\n\nconst JWA = {\n  sign: new Map(),\n  verify: new Map(),\n  keyManagementEncrypt: new Map(),\n  keyManagementDecrypt: new Map(),\n  encrypt: new Map(),\n  decrypt: new Map()\n}; // sign, verify\n\nrequire('./hmac')(JWA);\n\nrequire('./ecdsa')(JWA);\n\nrequire('./eddsa')(JWA);\n\nrequire('./rsassa')(JWA);\n\nrequire('./rsassa_pss')(JWA); // encrypt, decrypt\n\n\nrequire('./aes_cbc_hmac_sha2')(JWA);\n\nrequire('./aes_gcm')(JWA); // wrapKey, unwrapKey\n\n\nrequire('./rsaes')(JWA);\n\nrequire('./aes_gcm_kw')(JWA);\n\nrequire('./aes_kw')(JWA); // deriveKey\n\n\nrequire('./pbes2')(JWA);\n\nrequire('./ecdh/kw')(JWA);\n\nrequire('./ecdh/dir')(JWA);\n\nconst check = (key, op, alg) => {\n  let label;\n  let keyOp;\n\n  if (op === 'keyManagementEncrypt') {\n    label = 'key management (encryption)';\n    keyOp = KEY_MANAGEMENT_ENCRYPT;\n  } else if (op === 'keyManagementDecrypt') {\n    label = 'key management (decryption)';\n    keyOp = KEY_MANAGEMENT_DECRYPT;\n  }\n\n  if (JWA[op].has(alg)) {\n    if (!key.algorithms(keyOp).has(alg)) {\n      throw new JWKKeySupport(\"the key does not support \".concat(alg, \" \").concat(label || op, \" algorithm\"));\n    }\n  } else {\n    throw new JOSENotSupported(\"unsupported \".concat(label || op, \" alg: \").concat(alg));\n  }\n};\n\nmodule.exports = {\n  check,\n  sign: (alg, key, payload) => {\n    check(key, 'sign', alg);\n    return JWA.sign.get(alg)(key, payload);\n  },\n  verify: (alg, key, payload, signature) => {\n    check(key, 'verify', alg);\n    return JWA.verify.get(alg)(key, payload, signature);\n  },\n  keyManagementEncrypt: (alg, key, payload, opts) => {\n    check(key, 'keyManagementEncrypt', alg);\n    return JWA.keyManagementEncrypt.get(alg)(key, payload, opts);\n  },\n  keyManagementDecrypt: (alg, key, payload, opts) => {\n    check(key, 'keyManagementDecrypt', alg);\n    return JWA.keyManagementDecrypt.get(alg)(key, payload, opts);\n  },\n  encrypt: (alg, key, cleartext, opts) => {\n    check(key, 'encrypt', alg);\n    return JWA.encrypt.get(alg)(key, cleartext, opts);\n  },\n  decrypt: (alg, key, ciphertext, opts) => {\n    check(key, 'decrypt', alg);\n    return JWA.decrypt.get(alg)(key, ciphertext, opts);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}