{"ast":null,"code":"const _require = require('crypto'),\n      generateKeyPairSync = _require.generateKeyPairSync,\n      async = _require.generateKeyPair;\n\nconst _require2 = require('util'),\n      promisify = _require2.promisify;\n\nconst _require3 = require('../../help/consts'),\n      THUMBPRINT_MATERIAL = _require3.THUMBPRINT_MATERIAL,\n      JWK_MEMBERS = _require3.JWK_MEMBERS,\n      PUBLIC_MEMBERS = _require3.PUBLIC_MEMBERS,\n      PRIVATE_MEMBERS = _require3.PRIVATE_MEMBERS,\n      KEY_MANAGEMENT_DECRYPT = _require3.KEY_MANAGEMENT_DECRYPT,\n      KEY_MANAGEMENT_ENCRYPT = _require3.KEY_MANAGEMENT_ENCRYPT,\n      OKP_CURVES = _require3.OKP_CURVES;\n\nconst _require4 = require('../../help/runtime_support'),\n      edDSASupported = _require4.edDSASupported;\n\nconst errors = require('../../errors');\n\nconst Key = require('./base');\n\nconst generateKeyPair = promisify(async);\nconst OKP_PUBLIC = new Set(['crv', 'x']);\nObject.freeze(OKP_PUBLIC);\nconst OKP_PRIVATE = new Set([...OKP_PUBLIC, 'd']);\nObject.freeze(OKP_PRIVATE);\nconst privateApi = Symbol('privateApi'); // Octet string key pairs Key Type\n\nclass OKPKey extends Key {\n  constructor(...args) {\n    super(...args);\n    Object.defineProperties(this, {\n      kty: {\n        value: 'OKP',\n        enumerable: true\n      }\n    });\n    this[JWK_MEMBERS]();\n  }\n\n  static get [PUBLIC_MEMBERS]() {\n    return OKP_PUBLIC;\n  }\n\n  static get [PRIVATE_MEMBERS]() {\n    return OKP_PRIVATE;\n  } // https://tc39.github.io/ecma262/#sec-ordinaryownpropertykeys no need for any special\n  // JSON.stringify handling in V8\n\n\n  [THUMBPRINT_MATERIAL]() {\n    return {\n      crv: this.crv,\n      kty: 'OKP',\n      x: this.x\n    };\n  }\n\n  algorithms(operation,\n  /* the rest is private API */\n  int, opts) {\n    const _ref = int === privateApi ? opts : {},\n          _ref$use = _ref.use,\n          use = _ref$use === void 0 ? this.use : _ref$use,\n          _ref$alg = _ref.alg,\n          alg = _ref$alg === void 0 ? this.alg : _ref$alg,\n          _ref$key_ops = _ref.key_ops,\n          ops = _ref$key_ops === void 0 ? this.key_ops : _ref$key_ops;\n\n    if (alg) {\n      return new Set(this.algorithms(operation, privateApi, {\n        alg: null,\n        use,\n        key_ops: ops\n      }).has(alg) ? [alg] : undefined);\n    }\n\n    if (operation === KEY_MANAGEMENT_ENCRYPT) {\n      operation = 'deriveKey';\n    } else if (operation === KEY_MANAGEMENT_DECRYPT) {\n      if (this.public) {\n        return new Set();\n      }\n\n      operation = 'deriveKey';\n    }\n\n    if (operation && ops && !ops.includes(operation)) {\n      return new Set();\n    }\n\n    switch (operation) {\n      case 'wrapKey':\n      case 'unwrapKey':\n      case 'encrypt':\n      case 'decrypt':\n        return new Set();\n\n      case 'sign':\n        if (this.public || use === 'enc' || this.crv.startsWith('X')) {\n          return new Set();\n        }\n\n        return new Set(['EdDSA']);\n\n      case 'verify':\n        if (use === 'enc' || this.crv.startsWith('X')) {\n          return new Set();\n        }\n\n        return new Set(['EdDSA']);\n\n      case 'deriveKey':\n        if (use === 'sig' || this.crv.startsWith('Ed')) {\n          return new Set();\n        } // return new Set(ECDH_ALGS)\n\n\n        return new Set();\n\n      case undefined:\n        return new Set([...this.algorithms('sign'), ...this.algorithms('verify'), ...this.algorithms('deriveKey')]);\n\n      default:\n        throw new TypeError('invalid key operation');\n    }\n  }\n\n  static async generate(crv = 'Ed25519', privat = true) {\n    if (!edDSASupported) {\n      throw new errors.JOSENotSupported('OKP keys are not supported in your Node.js runtime version');\n    }\n\n    if (!OKP_CURVES.has(crv)) {\n      throw new errors.JOSENotSupported(\"unsupported OKP key curve: \".concat(crv));\n    }\n\n    const _ref2 = await generateKeyPair(crv.toLowerCase()),\n          privateKey = _ref2.privateKey,\n          publicKey = _ref2.publicKey;\n\n    return privat ? privateKey : publicKey;\n  }\n\n  static generateSync(crv = 'Ed25519', privat = true) {\n    if (!edDSASupported) {\n      throw new errors.JOSENotSupported('OKP keys are not supported in your Node.js runtime version');\n    }\n\n    if (!OKP_CURVES.has(crv)) {\n      throw new errors.JOSENotSupported(\"unsupported OKP key curve: \".concat(crv));\n    }\n\n    const _generateKeyPairSync = generateKeyPairSync(crv.toLowerCase()),\n          privateKey = _generateKeyPairSync.privateKey,\n          publicKey = _generateKeyPairSync.publicKey;\n\n    return privat ? privateKey : publicKey;\n  }\n\n}\n\nmodule.exports = OKPKey;","map":null,"metadata":{},"sourceType":"script"}