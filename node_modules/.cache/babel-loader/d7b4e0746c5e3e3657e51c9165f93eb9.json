{"ast":null,"code":"const errors = require('../errors');\n\nconst importKey = require('./import');\n\nconst RSAKey = require('./key/rsa');\n\nconst ECKey = require('./key/ec');\n\nconst OKPKey = require('./key/okp');\n\nconst OctKey = require('./key/oct');\n\nconst generate = async (kty, crvOrSize, params, generatePrivate = true) => {\n  switch (kty) {\n    case 'RSA':\n      return importKey((await RSAKey.generate(crvOrSize, generatePrivate)), params);\n\n    case 'EC':\n      return importKey((await ECKey.generate(crvOrSize, generatePrivate)), params);\n\n    case 'OKP':\n      return importKey((await OKPKey.generate(crvOrSize, generatePrivate)), params);\n\n    case 'oct':\n      return importKey((await OctKey.generate(crvOrSize, generatePrivate)), params);\n\n    default:\n      throw new errors.JOSENotSupported(\"unsupported key type: \".concat(kty));\n  }\n};\n\nconst generateSync = (kty, crvOrSize, params, generatePrivate = true) => {\n  switch (kty) {\n    case 'RSA':\n      return importKey(RSAKey.generateSync(crvOrSize, generatePrivate), params);\n\n    case 'EC':\n      return importKey(ECKey.generateSync(crvOrSize, generatePrivate), params);\n\n    case 'OKP':\n      return importKey(OKPKey.generateSync(crvOrSize, generatePrivate), params);\n\n    case 'oct':\n      return importKey(OctKey.generateSync(crvOrSize, generatePrivate), params);\n\n    default:\n      throw new errors.JOSENotSupported(\"unsupported key type: \".concat(kty));\n  }\n};\n\nmodule.exports.generate = generate;\nmodule.exports.generateSync = generateSync;","map":null,"metadata":{},"sourceType":"script"}