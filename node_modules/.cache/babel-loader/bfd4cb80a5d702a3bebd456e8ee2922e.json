{"ast":null,"code":"const _require = require('../errors'),\n      JOSEInvalidEncoding = _require.JOSEInvalidEncoding;\n\nconst b64uRegExp = /^[a-zA-Z0-9_-]*$/;\n\nconst fromBase64 = base64 => {\n  return base64.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n};\n\nconst toBase64 = base64url => {\n  return base64url.replace(/-/g, '+').replace(/_/g, '/');\n};\n\nconst encode = (input, encoding = 'utf8') => {\n  return fromBase64(Buffer.from(input, encoding).toString('base64'));\n};\n\nconst encodeBuffer = buf => {\n  return fromBase64(buf.toString('base64'));\n};\n\nconst decodeToBuffer = input => {\n  if (!b64uRegExp.test(input)) {\n    throw new JOSEInvalidEncoding('input is not a valid base64url encoded string');\n  }\n\n  return Buffer.from(toBase64(input), 'base64');\n};\n\nconst decode = (input, encoding = 'utf8') => {\n  return decodeToBuffer(input).toString(encoding);\n};\n\nconst b64uJSON = {\n  encode: input => {\n    return encode(JSON.stringify(input));\n  },\n  decode: (input, encoding = 'utf8') => {\n    return JSON.parse(decode(input, encoding));\n  }\n};\n\nb64uJSON.decode.try = (input, encoding = 'utf8') => {\n  try {\n    return b64uJSON.decode(input, encoding);\n  } catch (err) {\n    return decode(input, encoding);\n  }\n};\n\nconst encodeBN = bn => encodeBuffer(bn.toBuffer());\n\nmodule.exports.decode = decode;\nmodule.exports.decodeToBuffer = decodeToBuffer;\nmodule.exports.encode = encode;\nmodule.exports.encodeBuffer = encodeBuffer;\nmodule.exports.JSON = b64uJSON;\nmodule.exports.encodeBN = encodeBN;","map":null,"metadata":{},"sourceType":"script"}