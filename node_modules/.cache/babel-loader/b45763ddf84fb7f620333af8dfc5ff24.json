{"ast":null,"code":"const _require = require('assert'),\n      assert = _require.strict;\n\nconst _require2 = require('crypto'),\n      createCipheriv = _require2.createCipheriv,\n      createDecipheriv = _require2.createDecipheriv;\n\nconst uint64be = require('../help/uint64be');\n\nconst timingSafeEqual = require('../help/timing_safe_equal');\n\nconst _require3 = require('../help/consts'),\n      KEYOBJECT = _require3.KEYOBJECT;\n\nconst _require4 = require('../errors'),\n      JWEInvalid = _require4.JWEInvalid,\n      JWEDecryptionFailed = _require4.JWEDecryptionFailed;\n\nconst checkInput = function (size, iv, tag) {\n  if (iv.length !== 16) {\n    throw new JWEInvalid('invalid iv');\n  }\n\n  if (arguments.length === 3) {\n    if (tag.length !== size / 8) {\n      throw new JWEInvalid('invalid tag');\n    }\n  }\n};\n\nconst encrypt = (size, sign, {\n  [KEYOBJECT]: keyObject\n}, cleartext, {\n  iv,\n  aad = Buffer.alloc(0)\n}) => {\n  const key = keyObject.export();\n  checkInput(size, iv);\n  const keySize = size / 8;\n  const encKey = key.slice(keySize);\n  const cipher = createCipheriv(\"aes-\".concat(size, \"-cbc\"), encKey, iv);\n  const ciphertext = Buffer.concat([cipher.update(cleartext), cipher.final()]);\n  const macData = Buffer.concat([aad, iv, ciphertext, uint64be(aad.length * 8)]);\n  const macKey = key.slice(0, keySize);\n  const tag = sign({\n    [KEYOBJECT]: macKey\n  }, macData).slice(0, keySize);\n  return {\n    ciphertext,\n    tag\n  };\n};\n\nconst decrypt = (size, sign, {\n  [KEYOBJECT]: keyObject\n}, ciphertext, {\n  iv,\n  tag = Buffer.alloc(0),\n  aad = Buffer.alloc(0)\n}) => {\n  checkInput(size, iv, tag);\n  const keySize = size / 8;\n  const key = keyObject.export();\n  const encKey = key.slice(keySize);\n  const macKey = key.slice(0, keySize);\n  const macData = Buffer.concat([aad, iv, ciphertext, uint64be(aad.length * 8)]);\n  const expectedTag = sign({\n    [KEYOBJECT]: macKey\n  }, macData, tag).slice(0, keySize);\n  const macCheckPassed = timingSafeEqual(tag, expectedTag);\n  let cleartext;\n\n  try {\n    const cipher = createDecipheriv(\"aes-\".concat(size, \"-cbc\"), encKey, iv);\n    cleartext = Buffer.concat([cipher.update(ciphertext), cipher.final()]);\n  } catch (err) {}\n\n  if (!cleartext || !macCheckPassed) {\n    throw new JWEDecryptionFailed();\n  }\n\n  return cleartext;\n};\n\nmodule.exports = JWA => {\n  ['A128CBC-HS256', 'A192CBC-HS384', 'A256CBC-HS512'].forEach(jwaAlg => {\n    const size = parseInt(jwaAlg.substr(1, 3), 10);\n    assert(!JWA.encrypt.has(jwaAlg), \"encrypt alg \".concat(jwaAlg, \" already registered\"));\n    assert(!JWA.decrypt.has(jwaAlg), \"decrypt alg \".concat(jwaAlg, \" already registered\"));\n    JWA.encrypt.set(jwaAlg, encrypt.bind(undefined, size, JWA.sign.get(\"HS\".concat(size * 2))));\n    JWA.decrypt.set(jwaAlg, decrypt.bind(undefined, size, JWA.sign.get(\"HS\".concat(size * 2))));\n  });\n};","map":null,"metadata":{},"sourceType":"script"}