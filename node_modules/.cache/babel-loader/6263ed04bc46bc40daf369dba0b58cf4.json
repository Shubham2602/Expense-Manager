{"ast":null,"code":"const _require = require('assert'),\n      assert = _require.strict;\n\nconst _require2 = require('crypto'),\n      publicEncrypt = _require2.publicEncrypt,\n      privateDecrypt = _require2.privateDecrypt,\n      constants = _require2.constants;\n\nconst _require3 = require('../help/consts'),\n      KEYOBJECT = _require3.KEYOBJECT;\n\nconst _require4 = require('../help/key_object'),\n      asInput = _require4.asInput;\n\nconst resolvePadding = alg => {\n  switch (alg) {\n    case 'RSA-OAEP-256':\n    case 'RSA-OAEP':\n      return constants.RSA_PKCS1_OAEP_PADDING;\n\n    case 'RSA1_5':\n      return constants.RSA_PKCS1_PADDING;\n  }\n};\n\nconst resolveOaepHash = alg => {\n  switch (alg) {\n    case 'RSA-OAEP-256':\n      return 'sha256';\n\n    case 'RSA-OAEP':\n      return 'sha1';\n\n    default:\n      return undefined;\n  }\n};\n\nconst wrapKey = (padding, oaepHash, {\n  [KEYOBJECT]: keyObject\n}, payload) => {\n  const key = asInput(keyObject, true);\n  return {\n    wrapped: publicEncrypt({\n      key,\n      oaepHash,\n      padding\n    }, payload)\n  };\n};\n\nconst unwrapKey = (padding, oaepHash, {\n  [KEYOBJECT]: keyObject\n}, payload) => {\n  const key = asInput(keyObject, false);\n  return privateDecrypt({\n    key,\n    oaepHash,\n    padding\n  }, payload);\n};\n\nmodule.exports = JWA => {\n  ['RSA1_5', 'RSA-OAEP', 'RSA-OAEP-256'].forEach(jwaAlg => {\n    const padding = resolvePadding(jwaAlg);\n    const oaepHash = resolveOaepHash(jwaAlg);\n    assert(!JWA.keyManagementEncrypt.has(jwaAlg), \"keyManagementEncrypt alg \".concat(jwaAlg, \" already registered\"));\n    assert(!JWA.keyManagementDecrypt.has(jwaAlg), \"keyManagementDecrypt alg \".concat(jwaAlg, \" already registered\"));\n    JWA.keyManagementEncrypt.set(jwaAlg, wrapKey.bind(undefined, padding, oaepHash));\n    JWA.keyManagementDecrypt.set(jwaAlg, unwrapKey.bind(undefined, padding, oaepHash));\n  });\n};","map":null,"metadata":{},"sourceType":"script"}