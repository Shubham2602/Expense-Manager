{"ast":null,"code":"const _require = require('assert'),\n      assert = _require.strict;\n\nconst _require2 = require('../../help/consts'),\n      KEYOBJECT = _require2.KEYOBJECT;\n\nconst _require3 = require('../../jwk/generate'),\n      generateSync = _require3.generateSync;\n\nconst derive = require('./derive');\n\nconst wrapKey = (wrap, derive, key, payload) => {\n  const epk = generateSync(key.kty, key.crv);\n  const derivedKey = derive(epk, key, payload);\n  const result = wrap({\n    [KEYOBJECT]: derivedKey\n  }, payload);\n  result.header = {\n    epk: {\n      kty: key.kty,\n      crv: key.crv,\n      x: epk.x,\n      y: epk.y\n    }\n  };\n  return result;\n};\n\nconst unwrapKey = (unwrap, derive, key, payload, {\n  apu,\n  apv,\n  epk\n}) => {\n  const derivedKey = derive(key, epk, {\n    apu,\n    apv\n  });\n  return unwrap({\n    [KEYOBJECT]: derivedKey\n  }, payload);\n};\n\nmodule.exports = JWA => {\n  ['ECDH-ES+A128KW', 'ECDH-ES+A192KW', 'ECDH-ES+A256KW'].forEach(jwaAlg => {\n    assert(!JWA.keyManagementEncrypt.has(jwaAlg), \"keyManagementEncrypt alg \".concat(jwaAlg, \" already registered\"));\n    assert(!JWA.keyManagementDecrypt.has(jwaAlg), \"keyManagementDecrypt alg \".concat(jwaAlg, \" already registered\"));\n    const kw = jwaAlg.substr(-6);\n    const kwWrap = JWA.keyManagementEncrypt.get(kw);\n    const kwUnwrap = JWA.keyManagementDecrypt.get(kw);\n    const keylen = parseInt(jwaAlg.substr(9, 3), 10);\n    JWA.keyManagementEncrypt.set(jwaAlg, wrapKey.bind(undefined, kwWrap, derive.bind(undefined, jwaAlg, keylen)));\n    JWA.keyManagementDecrypt.set(jwaAlg, unwrapKey.bind(undefined, kwUnwrap, derive.bind(undefined, jwaAlg, keylen)));\n  });\n};","map":null,"metadata":{},"sourceType":"script"}