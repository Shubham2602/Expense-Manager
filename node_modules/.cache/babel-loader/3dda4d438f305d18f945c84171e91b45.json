{"ast":null,"code":"const _require = require('assert'),\n      assert = _require.strict;\n\nconst _require2 = require('crypto'),\n      signOneShot = _require2.sign,\n      verifyOneShot = _require2.verify,\n      createSign = _require2.createSign,\n      createVerify = _require2.createVerify;\n\nconst _require3 = require('../help/consts'),\n      KEYOBJECT = _require3.KEYOBJECT;\n\nconst resolveNodeAlg = require('../help/node_alg');\n\nconst _require4 = require('../help/key_object'),\n      asInput = _require4.asInput;\n\nlet sign, verify;\n\nif (signOneShot) {\n  sign = (nodeAlg, {\n    [KEYOBJECT]: keyObject\n  }, payload) => {\n    return signOneShot(nodeAlg, payload, keyObject);\n  };\n} else {\n  sign = (nodeAlg, {\n    [KEYOBJECT]: keyObject\n  }, payload) => {\n    return createSign(nodeAlg).update(payload).sign(asInput(keyObject, false));\n  };\n}\n\nif (verifyOneShot) {\n  verify = (nodeAlg, {\n    [KEYOBJECT]: keyObject\n  }, payload, signature) => {\n    return verifyOneShot(nodeAlg, payload, keyObject, signature);\n  };\n} else {\n  verify = (nodeAlg, {\n    [KEYOBJECT]: keyObject\n  }, payload, signature) => {\n    try {\n      return createVerify(nodeAlg).update(payload).verify(asInput(keyObject, true), signature);\n    } catch (err) {\n      return false;\n    }\n  };\n}\n\nmodule.exports = JWA => {\n  ['RS256', 'RS384', 'RS512'].forEach(jwaAlg => {\n    const nodeAlg = resolveNodeAlg(jwaAlg);\n    assert(!JWA.sign.has(jwaAlg), \"sign alg \".concat(jwaAlg, \" already registered\"));\n    assert(!JWA.verify.has(jwaAlg), \"verify alg \".concat(jwaAlg, \" already registered\"));\n    JWA.sign.set(jwaAlg, sign.bind(undefined, nodeAlg));\n    JWA.verify.set(jwaAlg, verify.bind(undefined, nodeAlg));\n  });\n};","map":null,"metadata":{},"sourceType":"script"}