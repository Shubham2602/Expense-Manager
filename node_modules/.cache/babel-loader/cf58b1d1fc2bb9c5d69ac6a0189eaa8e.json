{"ast":null,"code":"const isDisjoint = require('../help/is_disjoint');\n\nconst base64url = require('../help/base64url');\n\nlet validateCrit = require('../help/validate_crit');\n\nconst _require = require('../errors'),\n      JWEInvalid = _require.JWEInvalid,\n      JOSENotSupported = _require.JOSENotSupported;\n\nvalidateCrit = validateCrit.bind(undefined, JWEInvalid);\n\nmodule.exports = (prot, unprotected, recipients, checkAlgorithms, crit) => {\n  if (typeof prot === 'string') {\n    try {\n      prot = base64url.JSON.decode(prot);\n    } catch (err) {\n      throw new JWEInvalid('could not parse JWE protected header');\n    }\n  }\n\n  let alg = [];\n  const enc = new Set();\n\n  if (!isDisjoint(prot, unprotected) || !recipients.every(({\n    header\n  }) => {\n    if (typeof header === 'object') {\n      alg.push(header.alg);\n      enc.add(header.enc);\n    }\n\n    const combined = { ...unprotected,\n      ...header\n    };\n    validateCrit(prot, combined, crit);\n\n    if ('zip' in combined) {\n      throw new JWEInvalid('\"zip\" Header Parameter MUST be integrity protected');\n    } else if (prot && 'zip' in prot && prot.zip !== 'DEF') {\n      throw new JOSENotSupported('only \"DEF\" compression algorithm is supported');\n    }\n\n    return isDisjoint(header, prot) && isDisjoint(header, unprotected);\n  })) {\n    throw new JWEInvalid('JWE Shared Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint');\n  }\n\n  if (typeof prot === 'object') {\n    alg.push(prot.alg);\n    enc.add(prot.enc);\n  }\n\n  if (typeof unprotected === 'object') {\n    alg.push(unprotected.alg);\n    enc.add(unprotected.enc);\n  }\n\n  alg = alg.filter(Boolean);\n  enc.delete(undefined);\n\n  if (recipients.length !== 1) {\n    if (alg.includes('dir') || alg.includes('ECDH-ES')) {\n      throw new JWEInvalid('dir and ECDH-ES alg may only be used with a single recipient');\n    }\n  }\n\n  if (checkAlgorithms) {\n    if (alg.length !== recipients.length) {\n      throw new JWEInvalid('missing Key Management algorithm');\n    }\n\n    if (enc.size === 0) {\n      throw new JWEInvalid('missing Content Encryption algorithm');\n    } else if (enc.size !== 1) {\n      throw new JWEInvalid('there must only be one Content Encryption algorithm');\n    }\n  } else {\n    if (enc.size > 1) {\n      throw new JWEInvalid('there must only be one Content Encryption algorithm');\n    }\n  }\n\n  return [...enc][0];\n};","map":null,"metadata":{},"sourceType":"script"}