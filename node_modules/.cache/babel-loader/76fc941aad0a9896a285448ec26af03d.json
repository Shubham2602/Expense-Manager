{"ast":null,"code":"/* eslint-disable camelcase */\nconst _require = require('util'),\n      inspect = _require.inspect;\n\nconst _require2 = require('./errors'),\n      RPError = _require2.RPError,\n      OPError = _require2.OPError;\n\nconst instance = require('./helpers/weak_cache');\n\nconst now = require('./helpers/unix_timestamp');\n\nconst _require3 = require('./helpers/client'),\n      authenticatedPost = _require3.authenticatedPost;\n\nconst processResponse = require('./helpers/process_response');\n\nconst TokenSet = require('./token_set');\n\nclass DeviceFlowHandle {\n  constructor({\n    client,\n    exchangeBody,\n    clientAssertionPayload,\n    response,\n    maxAge\n  }) {\n    ['verification_uri', 'user_code', 'device_code'].forEach(prop => {\n      if (typeof response[prop] !== 'string' || !response[prop]) {\n        throw new RPError(\"expected \".concat(prop, \" string to be returned by Device Authorization Response, got %j\"), response[prop]);\n      }\n    });\n\n    if (!Number.isSafeInteger(response.expires_in)) {\n      throw new RPError('expected expires_in number to be returned by Device Authorization Response, got %j', response.expires_in);\n    }\n\n    instance(this).expires_at = now() + response.expires_in;\n    instance(this).client = client;\n    instance(this).maxAge = maxAge;\n    instance(this).exchangeBody = exchangeBody;\n    instance(this).clientAssertionPayload = clientAssertionPayload;\n    instance(this).response = response;\n    instance(this).interval = response.interval * 1000 || 5000;\n  }\n\n  async poll() {\n    if (this.expired()) {\n      throw new RPError('the device code %j has expired and the device authorization session has concluded', this.device_code);\n    }\n\n    await new Promise(resolve => setTimeout(resolve, instance(this).interval));\n    const response = await authenticatedPost.call(instance(this).client, 'token', {\n      form: true,\n      body: { ...instance(this).exchangeBody,\n        grant_type: 'urn:ietf:params:oauth:grant-type:device_code',\n        device_code: this.device_code\n      },\n      json: true\n    }, {\n      clientAssertionPayload: instance(this).clientAssertionPayload\n    });\n    let responseBody;\n\n    try {\n      responseBody = processResponse(response);\n    } catch (err) {\n      switch (err instanceof OPError && err.error) {\n        case 'slow_down':\n          instance(this).interval += 5000;\n\n        case 'authorization_pending':\n          // eslint-disable-line no-fallthrough\n          return this.poll();\n\n        default:\n          throw err;\n      }\n    }\n\n    const tokenset = new TokenSet(responseBody);\n\n    if ('id_token' in tokenset) {\n      await instance(this).client.decryptIdToken(tokenset);\n      await instance(this).client.validateIdToken(tokenset, undefined, 'token', instance(this).maxAge);\n    }\n\n    return tokenset;\n  }\n\n  get device_code() {\n    return instance(this).response.device_code;\n  }\n\n  get user_code() {\n    return instance(this).response.user_code;\n  }\n\n  get verification_uri() {\n    return instance(this).response.verification_uri;\n  }\n\n  get verification_uri_complete() {\n    return instance(this).response.verification_uri_complete;\n  }\n\n  get expires_in() {\n    return Math.max.apply(null, [instance(this).expires_at - now(), 0]);\n  }\n\n  expired() {\n    return this.expires_in === 0;\n  }\n  /* istanbul ignore next */\n\n\n  [inspect.custom]() {\n    return \"\".concat(this.constructor.name, \" \").concat(inspect(instance(this).response, {\n      depth: Infinity,\n      colors: process.stdout.isTTY,\n      compact: false,\n      sorted: true\n    }));\n  }\n\n}\n\nmodule.exports = DeviceFlowHandle;","map":null,"metadata":{},"sourceType":"script"}