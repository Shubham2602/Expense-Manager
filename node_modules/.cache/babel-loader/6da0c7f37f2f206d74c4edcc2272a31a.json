{"ast":null,"code":"const _require = require('assert'),\n      assert = _require.strict;\n\nconst _require2 = require('crypto'),\n      pbkdf2 = _require2.pbkdf2Sync,\n      randomBytes = _require2.randomBytes;\n\nconst _require3 = require('../help/consts'),\n      KEYOBJECT = _require3.KEYOBJECT;\n\nconst base64url = require('../help/base64url');\n\nconst SALT_LENGTH = 16;\nconst NULL_BUFFER = Buffer.alloc(1, 0);\n\nconst concatSalt = (alg, p2s) => {\n  return Buffer.concat([Buffer.from(alg, 'utf8'), NULL_BUFFER, p2s]);\n};\n\nconst wrapKey = (keylen, sha, concat, wrap, {\n  [KEYOBJECT]: keyObject\n}, payload) => {\n  // Note that if password-based encryption is used for multiple\n  // recipients, it is expected that each recipient use different values\n  // for the PBES2 parameters \"p2s\" and \"p2c\".\n  // here we generate p2c between 2048 and 4096 and random p2s\n  const p2c = Math.floor(Math.random() * 2049 + 2048);\n  const p2s = randomBytes(SALT_LENGTH);\n  const salt = concat(p2s);\n  const derivedKey = pbkdf2(keyObject.export(), salt, p2c, keylen, sha);\n  const result = wrap({\n    [KEYOBJECT]: derivedKey\n  }, payload);\n  result.header = {\n    p2c,\n    p2s: base64url.encodeBuffer(p2s)\n  };\n  return result;\n};\n\nconst unwrapKey = (keylen, sha, concat, unwrap, {\n  [KEYOBJECT]: keyObject\n}, payload, {\n  p2c,\n  p2s\n}) => {\n  const salt = concat(p2s);\n  const derivedKey = pbkdf2(keyObject.export(), salt, p2c, keylen, sha);\n  return unwrap({\n    [KEYOBJECT]: derivedKey\n  }, payload);\n};\n\nmodule.exports = JWA => {\n  ['PBES2-HS256+A128KW', 'PBES2-HS384+A192KW', 'PBES2-HS512+A256KW'].forEach(jwaAlg => {\n    assert(!JWA.keyManagementEncrypt.has(jwaAlg), \"keyManagementEncrypt alg \".concat(jwaAlg, \" already registered\"));\n    assert(!JWA.keyManagementDecrypt.has(jwaAlg), \"keyManagementDecrypt alg \".concat(jwaAlg, \" already registered\"));\n    const kw = jwaAlg.substr(-6);\n    const kwWrap = JWA.keyManagementEncrypt.get(kw);\n    const kwUnwrap = JWA.keyManagementDecrypt.get(kw);\n    const keylen = parseInt(jwaAlg.substr(13, 3), 10) / 8;\n    const sha = \"sha\".concat(jwaAlg.substr(8, 3));\n    JWA.keyManagementEncrypt.set(jwaAlg, wrapKey.bind(undefined, keylen, sha, concatSalt.bind(undefined, jwaAlg), kwWrap));\n    JWA.keyManagementDecrypt.set(jwaAlg, unwrapKey.bind(undefined, keylen, sha, concatSalt.bind(undefined, jwaAlg), kwUnwrap));\n  });\n};","map":null,"metadata":{},"sourceType":"script"}