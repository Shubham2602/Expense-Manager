{"ast":null,"code":"const isObject = require('../help/is_object');\n\nlet validateCrit = require('../help/validate_crit');\n\nconst _require = require('../errors'),\n      JWSInvalid = _require.JWSInvalid;\n\nvalidateCrit = validateCrit.bind(undefined, JWSInvalid);\n\nconst compactSerializer = (payload, [recipient]) => {\n  return \"\".concat(recipient.protected, \".\").concat(payload, \".\").concat(recipient.signature);\n};\n\ncompactSerializer.validate = (jws, {\n  0: {\n    unprotectedHeader,\n    protectedHeader\n  },\n  length\n}) => {\n  if (length !== 1 || unprotectedHeader) {\n    throw new JWSInvalid('JWS Compact Serialization doesn\\'t support multiple recipients or JWS unprotected headers');\n  }\n\n  validateCrit(protectedHeader, unprotectedHeader, protectedHeader ? protectedHeader.crit : undefined);\n};\n\nconst flattenedSerializer = (payload, [recipient]) => {\n  const header = recipient.header,\n        signature = recipient.signature,\n        prot = recipient.protected;\n  return {\n    payload,\n    ...(prot ? {\n      protected: prot\n    } : undefined),\n    ...(header ? {\n      header\n    } : undefined),\n    signature\n  };\n};\n\nflattenedSerializer.validate = (jws, {\n  0: {\n    unprotectedHeader,\n    protectedHeader\n  },\n  length\n}) => {\n  if (length !== 1) {\n    throw new JWSInvalid('Flattened JWS JSON Serialization doesn\\'t support multiple recipients');\n  }\n\n  validateCrit(protectedHeader, unprotectedHeader, protectedHeader ? protectedHeader.crit : undefined);\n};\n\nconst generalSerializer = (payload, recipients) => {\n  return {\n    payload,\n    signatures: recipients.map(({\n      header,\n      signature,\n      protected: prot\n    }) => {\n      return { ...(prot ? {\n          protected: prot\n        } : undefined),\n        ...(header ? {\n          header\n        } : undefined),\n        signature\n      };\n    })\n  };\n};\n\ngeneralSerializer.validate = (jws, recipients) => {\n  recipients.forEach(({\n    protectedHeader,\n    unprotectedHeader\n  }) => {\n    validateCrit(protectedHeader, unprotectedHeader, protectedHeader ? protectedHeader.crit : undefined);\n  });\n};\n\nconst isJSON = input => {\n  return isObject(input) && typeof input.payload === 'string';\n};\n\nconst isValidRecipient = recipient => {\n  return isObject(recipient) && typeof recipient.signature === 'string' && (recipient.header === undefined || isObject(recipient.header)) && (recipient.protected === undefined || typeof recipient.protected === 'string');\n};\n\nconst isMultiRecipient = input => {\n  if (Array.isArray(input.signatures) && input.signatures.every(isValidRecipient)) {\n    return true;\n  }\n\n  return false;\n};\n\nconst detect = input => {\n  if (typeof input === 'string' && input.split('.').length === 3) {\n    return 'compact';\n  }\n\n  if (isJSON(input)) {\n    if (isMultiRecipient(input)) {\n      return 'general';\n    }\n\n    if (isValidRecipient(input)) {\n      return 'flattened';\n    }\n  }\n\n  throw new JWSInvalid('JWS malformed or invalid serialization');\n};\n\nmodule.exports = {\n  compact: compactSerializer,\n  flattened: flattenedSerializer,\n  general: generalSerializer,\n  detect\n};","map":null,"metadata":{},"sourceType":"script"}