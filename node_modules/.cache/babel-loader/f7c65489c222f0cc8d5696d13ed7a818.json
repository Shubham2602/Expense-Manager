{"ast":null,"code":"const _require = require('http'),\n      STATUS_CODES = _require.STATUS_CODES;\n\nconst _require2 = require('util'),\n      format = _require2.format;\n\nconst _require3 = require('../errors'),\n      OPError = _require3.OPError;\n\nconst REGEXP = /(\\w+)=(\"[^\"]*\")/g;\n\nconst throwAuthenticateErrors = response => {\n  const params = {};\n\n  try {\n    while (REGEXP.exec(response.headers['www-authenticate']) !== null) {\n      if (RegExp.$1 && RegExp.$2) {\n        params[RegExp.$1] = RegExp.$2.slice(1, -1);\n      }\n    }\n  } catch (err) {}\n\n  if (params.error) {\n    throw new OPError(params, response);\n  }\n};\n\nconst isStandardBodyError = response => {\n  try {\n    if (typeof response.body !== 'object') {\n      response.body = JSON.parse(response.body);\n    }\n\n    return typeof response.body.error === 'string' && response.body.error.length;\n  } catch (err) {}\n\n  return false;\n};\n\nfunction processResponse(response, {\n  statusCode = 200,\n  body = true,\n  bearer = false\n} = {}) {\n  if (response.statusCode !== statusCode) {\n    if (bearer) {\n      throwAuthenticateErrors(response);\n    }\n\n    if (isStandardBodyError(response)) {\n      throw new OPError(response.body, response);\n    }\n\n    throw new OPError({\n      error: format('expected %i %s, got: %i %s', statusCode, STATUS_CODES[statusCode], response.statusCode, STATUS_CODES[response.statusCode])\n    }, response);\n  }\n\n  if (body && !response.body) {\n    throw new OPError({\n      error: format('expected %i %s with body but no body was returned', statusCode, STATUS_CODES[statusCode])\n    }, response);\n  }\n\n  return response.body;\n}\n\nmodule.exports = processResponse;","map":null,"metadata":{},"sourceType":"script"}