{"ast":null,"code":"const _require = require('assert'),\n      assert = _require.strict;\n\nconst _require2 = require('crypto'),\n      createHmac = _require2.createHmac;\n\nconst _require3 = require('../help/consts'),\n      KEYOBJECT = _require3.KEYOBJECT;\n\nconst timingSafeEqual = require('../help/timing_safe_equal');\n\nconst resolveNodeAlg = require('../help/node_alg');\n\nconst _require4 = require('../help/key_object'),\n      asInput = _require4.asInput;\n\nconst sign = (jwaAlg, hmacAlg, {\n  [KEYOBJECT]: keyObject\n}, payload) => {\n  const hmac = createHmac(hmacAlg, asInput(keyObject, false));\n  hmac.update(payload);\n  return hmac.digest();\n};\n\nconst verify = (jwaAlg, hmacAlg, {\n  [KEYOBJECT]: keyObject\n}, payload, signature) => {\n  const hmac = createHmac(hmacAlg, asInput(keyObject, false));\n  hmac.update(payload);\n  const expected = hmac.digest();\n  const actual = signature;\n  return timingSafeEqual(actual, expected);\n};\n\nmodule.exports = JWA => {\n  ['HS256', 'HS384', 'HS512'].forEach(jwaAlg => {\n    const hmacAlg = resolveNodeAlg(jwaAlg);\n    assert(!JWA.sign.has(jwaAlg), \"sign alg \".concat(jwaAlg, \" already registered\"));\n    assert(!JWA.verify.has(jwaAlg), \"verify alg \".concat(jwaAlg, \" already registered\"));\n    JWA.sign.set(jwaAlg, sign.bind(undefined, jwaAlg, hmacAlg));\n    JWA.verify.set(jwaAlg, verify.bind(undefined, jwaAlg, hmacAlg));\n  });\n};","map":null,"metadata":{},"sourceType":"script"}